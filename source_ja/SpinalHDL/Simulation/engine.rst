

========================
Simulation engine
========================

このページでは、シミュレーションエンジンの内部について説明します。

シミュレーションエンジンは、次のシミュレーションループを Verilator C++ シミュレーションモデルの上に適用することで、
イベント駆動型シミュレータ（ VHDL/Verilog ライク）をエミュレートします。

.. image:: /asset/picture/simEngine.png
   :align: center

低レベルでは、シミュレーションエンジンは次のプリミティブを管理しています：

- *Sensitive callbacks*：ユーザーが各シミュレーションデルタサイクルごとに関数を呼び出すことを可能にします。
- *Delayed callbacks*：ユーザーが将来のシミュレーション時刻で関数を呼び出すことを可能にします。
- *Simulation threads*：ユーザーが並行プロセスを記述することを可能にします。
- *Command buffer*：ユーザーが :abbr:`DUT (Device Under Test)` への書き込みアクセスを現在のデルタサイクルの終わりまで遅延させることを可能にします。

これらのプリミティブのいくつかの実用的な用途があります：

- Sensitive callbacksは、クロックの立ち上がりなど、特定の条件が発生したときにシミュレーションスレッドを起こすために使用できます。
- Delayed callbacksは、リセットを一定の時間後に解除する、またはクロックをトグルするなどの刺激をスケジュールするために使用できます。
- Sensitive および Delayed callbacks の両方を使用して、シミュレーションスレッドを再開することができます。
- シミュレーションスレッドは、（例えば）刺激を生成し、DUT の出力値をチェックするために使用できます。
- コマンドバッファの目的は、主に DUT とテストベンチ間のすべての並行性の問題を回避することです。
  
