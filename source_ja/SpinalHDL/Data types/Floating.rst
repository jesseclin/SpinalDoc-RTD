.. warning::
   SpinalHDL の浮動小数点サポートは開発中であり、一部のみ使用されておりテストされています。
   もし何か問題がある場合や、機能が不足していると思われる場合は、 
   `Github issue <https://github.com/SpinalHDL/SpinalHDL/issues>`_ を作成してください。
   また、コード内で未文書化の機能を使用しないでください。
   
.. _Floating:

Floating
========

説明
^^^^^^^^^^^

``Floating`` 型は IEEE-754 形式の数値に対応しています。 ``RecFloating`` という2番目の型は、
IEEE-754 浮動小数点のいくつかのエッジケースを簡略化するために浮動小数点値を再コード化します。

これは符号ビット、指数部、および仮数部から構成されています。異なるフィールドの幅は IEEE-754 または事実上の標準で定義されています。

この型は以下のインポートとともに使用できます：

.. code-block:: scala

   import spinal.lib.experimental.math._

IEEE-754 浮動小数点形式
~~~~~~~~~~~~~~~~~~~~~~~~

数値は IEEE-754 `浮動小数点形式 <https://en.wikipedia.org/wiki/IEEE_floating_point>`_ にエンコードされます。

再コード化された浮動小数点形式
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

IEEE-754 には非正規化数や特別な値に関するいくつかの特異点があるため、バークレイは浮動小数点値を再コードする別の方法を提案しました。

仮数部は、非正規化値を正規化値と同じように扱えるように変更されています。

指数部は IEEE-754 数値の1ビット大きくなっています。

符号ビットは、両方のエンコーディング間で変更されていません。

例は `こちら <https://github.com/ucb-bar/berkeley-hardfloat/blob/master/README.md>`_ で見つけることができます。

ゼロ
""""

ゼロは、指数部の先頭の3つのゼロがゼロに設定されることでエンコードされます。

非正規化値
""""""""""

非正規化値は通常の浮動小数点数と同じ方法でエンコードされます。仮数部がシフトされ、最初の1ビットが暗黙的になります。
指数部は、10進数で107に符号化され、最も高い1に設定されたビットのインデックスが追加されます。

正規化値
""""""""""

正規化された値の再コードされた仮数部は、元の IEEE-754 仮数部とまったく同じです。再コードされた指数部は、10進数で130に符号化され、元の指数値が追加されます。

無限大
""""""""

再コードされた仮数値は無視されます。再コードされた指数部の最上位3ビットは6 (10進数) であり、残りの指数部は無視されます。

NaN
""""""

正規化された値の再コードされた仮数部は、元の IEEE-754 仮数部とまったく同じです。再コードされた指数部の最上位3ビットは7 (10進数) であり、残りの指数部は無視されます。


宣言
^^^^^^^^^^^

浮動小数点数を宣言する構文は次の通りです：

IEEE-754 数
~~~~~~~~~~~~~~~

.. list-table::
   :header-rows: 1

   * - 構文
     - 説明
   * - Floating(exponentSize: Int, mantissaSize: Int)
     - カスタム指数および仮数サイズを使用した IEEE-754 浮動小数点値
   * - Floating16()
     - IEEE-754 半精度浮動小数点数
   * - Floating32()
     - IEEE-754 単精度浮動小数点数
   * - Floating64()
     - IEEE-754 倍精度浮動小数点数
   * - Floating128()
     - IEEE-754 4 倍精度浮動小数点数

再コード化された浮動小数点数
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. list-table::
   :header-rows: 1

   * - 構文
     - 説明
   * - RecFloating(exponentSize: Int, mantissaSize: Int)
     - カスタム指数および仮数サイズを使用した再コード化された浮動小数点値
   * - RecFloating16()
     - 再コード化された半精度浮動小数点数
   * - RecFloating32()
     - 再コード化された単精度浮動小数点数
   * - RecFloating64()
     - 再コード化された倍精度浮動小数点数
   * - RecFloating128()
     - 再コード化された 4 倍精度浮動小数点数

オペレーター
^^^^^^^^^^^^^^

次の演算子は ``Floating`` 型と ``RecFloating`` 型で使用できます。

型キャスト
~~~~~~~~~~~~

.. list-table::
   :header-rows: 1
   :widths: 2 5 1

   * - 演算子
     - 説明
     - 戻り値
   * - x.asBits
     - バイナリをビットにキャスト
     - Bits(w(x) bits)
   * - x.asBools
     - Bool の配列にキャストします
     - Vec(Bool(),width(x))
   * - x.toUInt(size: Int)
     - 対応する UInt を返します (切り捨てあり)
     - UInt
   * - x.toSInt(size: Int)
     - 対応する SInt を返します (切り捨てあり)
     - SInt
   * - x.fromUInt
     - 対応する浮動小数点数を返します（切り捨てあり）
     - UInt
   * - x.fromSInt
     - 対応する浮動小数点数を返します（切り捨てあり）
     - SInt

